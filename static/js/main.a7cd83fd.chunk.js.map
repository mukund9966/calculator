{"version":3,"sources":["components/KeyPad.js","components/Display.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["newButtons","id","value","name","KeyPad","CreateButton","data","map","button","push","className","this","Component","Display","props","readOnly","values","miniDisplay","Calculator","DisplayFormatter","MiniDisplayFormatter","state","display","App","handleKeyPress","e","document","addEventListener","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAEMA,G,MAAY,CACd,CACIC,GAAG,OACHC,MAAM,IACNC,KAAM,KAEV,CACIF,GAAG,MACHC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,MACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,QACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,OACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,OACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,MACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,QACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,QACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,OACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,MACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,WACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,WACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,SACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAI,QACJC,MAAO,GACPC,KAAM,MAEV,CACIF,GAAI,UACJC,MAAO,IACPC,KAAM,KAEV,CACIF,GAAG,SACHC,MAAO,IACPC,KAAM,OAyBCC,E,4MAnBXC,aAAc,WACV,IAAIC,EAAK,GAMT,OALDN,EAAWO,KAAI,SAACC,GACX,OACIF,EAAKG,KAAK,4BAAQR,GAAIO,EAAOP,GAAIC,MAAOM,EAAOP,GAAIS,UAAU,cAAcF,EAAOL,UAGnFG,G,uDAIP,OACI,yBAAKI,UAAU,YACVC,KAAKN,oB,GAfDO,aCxENC,E,kDAfX,WAAYC,GAAQ,uCACVA,G,qDAKN,OACI,yBAAKJ,UAAU,qBACX,2BAAOK,UAAQ,EAACL,UAAU,eAAeR,MAAOS,KAAKG,MAAME,OAAOC,cAClE,2BAAOF,UAAQ,EAACL,UAAU,UAAUR,MAAOS,KAAKG,MAAME,OAAOH,e,GAVvDD,aC8BPM,E,kDA3BX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IAQVK,iBAAkB,aATC,EAanBC,qBAAsB,aAVlB,EAAKC,MAAQ,CACRC,QAAQ,GACRL,YAAY,IALF,E,qDAkBf,OACI,yBAAKP,UAAU,kBACX,kBAAC,EAAD,CAASM,OAAQL,KAAKU,MAAOF,iBAAkBR,KAAKQ,iBAAkBC,qBAAsBT,KAAKS,uBACjG,kBAAC,EAAD,W,GAtBSR,aCqBVW,E,kDApBb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IAORU,eAAgB,SAACC,KARE,E,gEAKjBC,SAASC,iBAAiB,QAAQhB,KAAKa,kB,+BAOvC,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,W,GAfUE,aCQEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7cd83fd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst newButtons= [\r\n    {\r\n        id:'zero',\r\n        value:'0',\r\n        name: '0'\r\n    },\r\n    {\r\n        id:'one',\r\n        value: '1',\r\n        name: '1'\r\n    },\r\n    {\r\n        id: 'two',\r\n        value: '2',\r\n        name: '2'\r\n    },\r\n    {\r\n        id: 'three',\r\n        value: '3',\r\n        name: '3'\r\n    },\r\n    {\r\n        id: 'four',\r\n        value: '4',\r\n        name: '4'\r\n    },\r\n    {\r\n        id: 'five',\r\n        value: '5',\r\n        name: '5'\r\n    },\r\n    {\r\n        id: 'six',\r\n        value: '6',\r\n        name: '6'\r\n    },\r\n    {\r\n        id: 'seven',\r\n        value: '7',\r\n        name: '7'\r\n    },\r\n    {\r\n        id: 'eight',\r\n        value: '8',\r\n        name: '8'\r\n    },\r\n    {\r\n        id: 'nine',\r\n        value: '9',\r\n        name: '9'\r\n    },\r\n    {\r\n        id: 'add',\r\n        value: '+',\r\n        name: '+'\r\n    }, \r\n    {\r\n        id: 'subtract',\r\n        value: '-',\r\n        name: '-'\r\n    }, \r\n    {\r\n        id: 'multiply',\r\n        value: '*',\r\n        name: 'X'\r\n    }, \r\n    {\r\n        id: 'divide',\r\n        value: '/',\r\n        name: '/'\r\n    }, \r\n    {\r\n        id: 'clear',\r\n        value: '',\r\n        name: 'AC'\r\n    }, \r\n    {\r\n        id: 'decimal',\r\n        value: '.',\r\n        name: '.'\r\n    },\r\n    {\r\n        id:'equals',\r\n        value: '=',\r\n        name: '='\r\n    } \r\n]\r\n\r\nclass KeyPad extends Component {\r\n    \r\n    CreateButton= () => {\r\n        let data=[]\r\n       newButtons.map((button) =>{\r\n            return (\r\n                data.push(<button id={button.id} value={button.id} className=\"key-button\">{button.name}</button>)\r\n            )\r\n        })\r\n        return data\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"key-grid\">\r\n                {this.CreateButton()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default KeyPad\r\n","import React, { Component } from 'react'\r\n\r\nclass Display extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"display-container\">\r\n                <input readOnly className=\"mini-display\" value={this.props.values.miniDisplay} />\r\n                <input readOnly className=\"display\" value={this.props.values.Display} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display\r\n","import React, { Component } from 'react'\r\nimport KeyPad from './KeyPad'\r\nimport Display from \"./Display\"\r\n\r\nclass Calculator extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             display:'',\r\n             miniDisplay:''\r\n        }\r\n    }\r\n\r\n    DisplayFormatter =() =>{\r\n\r\n    }\r\n\r\n    MiniDisplayFormatter =() =>{\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator-box\">\r\n                <Display values={this.state} DisplayFormatter={this.DisplayFormatter} MiniDisplayFormatter={this.MiniDisplayFormatter }/>\r\n                <KeyPad />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"click\",this.handleKeyPress)\n  }\n\n  handleKeyPress =(e) =>{\n    \n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}