{"version":3,"sources":["components/KeyPad.js","components/Display.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["newButtons","id","value","name","KeyPad","CreateButton","data","map","button","push","className","onClick","keyPress","e","props","handleKeyPress","target","this","Component","Display","readOnly","miniDisplay","display","Calculator","DisplayFormatter","val","currentDisplay","state","prevDisplay","canOperator","canDecimal","newEvent","setState","console","log","test","slice","length","answer","math","concat","toString","App","document","getElementsByClassName","eachButton","addEventListener","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d66e69c2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst newButtons= [\r\n    {\r\n        id:'zero',\r\n        value:'0',\r\n        name: '0'\r\n    },\r\n    {\r\n        id:'one',\r\n        value: '1',\r\n        name: '1'\r\n    },\r\n    {\r\n        id: 'two',\r\n        value: '2',\r\n        name: '2'\r\n    },\r\n    {\r\n        id: 'three',\r\n        value: '3',\r\n        name: '3'\r\n    },\r\n    {\r\n        id: 'four',\r\n        value: '4',\r\n        name: '4'\r\n    },\r\n    {\r\n        id: 'five',\r\n        value: '5',\r\n        name: '5'\r\n    },\r\n    {\r\n        id: 'six',\r\n        value: '6',\r\n        name: '6'\r\n    },\r\n    {\r\n        id: 'seven',\r\n        value: '7',\r\n        name: '7'\r\n    },\r\n    {\r\n        id: 'eight',\r\n        value: '8',\r\n        name: '8'\r\n    },\r\n    {\r\n        id: 'nine',\r\n        value: '9',\r\n        name: '9'\r\n    },\r\n    {\r\n        id: 'add',\r\n        value: '+',\r\n        name: '+'\r\n    }, \r\n    {\r\n        id: 'subtract',\r\n        value: '-',\r\n        name: '-'\r\n    }, \r\n    {\r\n        id: 'multiply',\r\n        value: '*',\r\n        name: 'X'\r\n    }, \r\n    {\r\n        id: 'divide',\r\n        value: '/',\r\n        name: '/'\r\n    }, \r\n    {\r\n        id: 'clear',\r\n        value: ' ',\r\n        name: 'AC'\r\n    }, \r\n    {\r\n        id: 'decimal',\r\n        value: '.',\r\n        name: '.'\r\n    },\r\n    {\r\n        id:'equals',\r\n        value: '=',\r\n        name: '='\r\n    } \r\n]\r\n\r\nclass KeyPad extends Component {\r\n    \r\n    CreateButton= () => {\r\n        let data=[]\r\n       newButtons.map((button) =>{\r\n            return (\r\n                data.push(<button id={button.id} value={button.value} className=\"key-button\" onClick={this.keyPress}>{button.name}</button>)\r\n            )\r\n        })\r\n        return data\r\n    }\r\n    keyPress=(e)=>{\r\n        \r\n        this.props.handleKeyPress(e.target.value)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"key-grid\">\r\n                {this.CreateButton()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default KeyPad\r\n","import React, { Component } from 'react'\r\n\r\nclass Display extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"display-container\">\r\n                <input readOnly className=\"mini-display\" value={this.props.miniDisplay} />\r\n                <input readOnly className=\"display\" value={this.props.display} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display\r\n","import React, { Component } from 'react'\r\nimport KeyPad from './KeyPad'\r\nimport Display from \"./Display\"\r\nimport * as math from 'mathjs'\r\n\r\nclass Calculator extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             display:'0',\r\n             miniDisplay:'0',\r\n             canOperator: false,\r\n             canDecimal:true,\r\n             newEvent:false\r\n        }\r\n    }\r\n\r\n    DisplayFormatter =(val) =>{\r\n        let currentDisplay = this.state.display\r\n        let prevDisplay = this.state.miniDisplay\r\n        let canOperator=this.state.canOperator\r\n        let canDecimal= this.state.canDecimal\r\n        if(this.state.newEvent==true) {\r\n            this.setState({\r\n                display: '0',\r\n                miniDisplay: '0',\r\n                canOperator: false,\r\n                canDecimal: true,\r\n                newEvent: false\r\n            })\r\n            currentDisplay = '0'\r\n            prevDisplay = '0'\r\n        }\r\n        console.log(this.state.newEvent)\r\n        \r\n        console.log(val)\r\n        switch(true) {\r\n            case /\\d/.test(val) :\r\n                if (currentDisplay !== '0' && (/\\d/.test(currentDisplay))){\r\n                    prevDisplay+=val\r\n                    currentDisplay+=val\r\n                   this.setState({canOperator:true})\r\n                }\r\n                else if ((/[\\+\\-\\*\\/]/.test(currentDisplay))) {\r\n                    currentDisplay=val\r\n                    prevDisplay += currentDisplay\r\n                    this.setState({ canOperator: true })\r\n                }\r\n                else {\r\n                    currentDisplay=val\r\n                    prevDisplay = currentDisplay\r\n                    this.setState({canOperator:true})\r\n                }\r\n            break\r\n            case /[\\+\\-\\*\\/]/.test(val) :\r\n                if (canOperator&&!(/[\\+\\-\\*\\/]/.test(currentDisplay))) {      //meaning the penultimate character was not an operator\r\n                    currentDisplay=val\r\n                    prevDisplay+=val\r\n                    this.setState({\r\n                        canOperator:true,\r\n                        canDecimal:true\r\n                    })\r\n                }\r\n                else if (canOperator && (/[\\+\\-\\*\\/]/.test(currentDisplay))) {\r\n                    currentDisplay=val\r\n                    prevDisplay=prevDisplay.slice(0,prevDisplay.length-1)+val\r\n                    this.setState({\r\n                        canOperator: true,\r\n                        canDecimal: true\r\n                    })\r\n                }\r\n            break\r\n            case'.'===val :\r\n                if(canDecimal){\r\n                    currentDisplay += val\r\n                    prevDisplay+=val\r\n                    this.setState({canDecimal:false})\r\n                }\r\n            break\r\n            case \" \" ===val :\r\n                currentDisplay='0'\r\n                prevDisplay='0'\r\n                this.setState({display:currentDisplay})\r\n            break\r\n            case \"=\" ===val :\r\n                if (!(/[\\+\\-\\*\\/]/.test(prevDisplay[prevDisplay.length - 1]))) {\r\n                    \r\n                    let answer=math.evaluate(prevDisplay)\r\n                    prevDisplay=prevDisplay.concat(\"=\").concat(answer.toString())\r\n                    currentDisplay = answer\r\n                    this.setState({\r\n                        newEvent:true\r\n                    })\r\n                }\r\n        }\r\n        this.setState({\r\n            display:currentDisplay,\r\n            miniDisplay:prevDisplay\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator-box\">\r\n                <Display display={this.state.display} miniDisplay={this.state.miniDisplay}/>\r\n                <KeyPad handleKeyPress={(val) =>this.DisplayFormatter(val)}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Calculator\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    let [...h]= document.getElementsByClassName(\"key-button\")\n    h.map((eachButton)=> {\n      eachButton.addEventListener(\"click\",this.handleKeyPress);\n    })\n  }\n\n  handleKeyPress =(e) =>{\n    \n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}